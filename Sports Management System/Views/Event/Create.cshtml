@model Sports_Management_System.Models.ViewModels.EventViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var games = (IEnumerable<Sports_Management_System.Models.Game>)TempData["gamesList"];
}


<h2>Create Event</h2>

@using (Html.BeginForm("Create", "Event", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Event.Event_ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Event.Game_ID, "Game_ID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="@Html.IdFor(model => model.Event.Game_ID)" name="@Html.NameFor(model => model.Event.Game_ID)" class="form-control gameList">
                    @foreach (var item in games)
                    {
                        <option data-duration="@item.Game_DurationInHours" value="@item.Game_ID">@item.Game_Name</option>
                    }
                    {

                    }
                </select>
                @Html.ValidationMessageFor(model => model.Event.Game_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Event.FeatureEvent, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Event.FeatureEvent)
                    @Html.ValidationMessageFor(model => model.Event.FeatureEvent, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Event.EventVenue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Event.EventVenue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Event.EventVenue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Event.EventDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="@Html.IdFor(model => model.Event.EventDate)" name="@Html.NameFor(model => model.Event.EventDate)" type="date" value="@Model.Event.EventDate" class="form-control eventDate" />
                @Html.ValidationMessageFor(model => model.Event.EventDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Event.EventStartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="EventStartTime" name="EventStartTime" type="time" value="@Model.Event.EventStartTime" class="form-control" />
                @Html.ValidationMessageFor(model => model.Event.EventStartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Event.EventEndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input id="EventEndTime" name="EventEndTime" type="time" value="" class="form-control" />
                @Html.ValidationMessageFor(model => model.Event.EventEndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Event.EventDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Event.EventDescription, 10, 40, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Event.EventDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EventPhoto.Event_Photo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <img id="eventPhoto" src="#" alt="image" style="width:150px;height:150px" class="img-responsive" />
                <input style="margin-top:10px" class="form-control" id="Event_Photo" name="Event_Photo" type="file" value="" />
                @Html.ValidationMessageFor(model => model.EventPhoto.Event_Photo, "", new { @class = "text-danger" });
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.EventPhoto.Event_PhotoTags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EventPhoto.Event_PhotoTags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EventPhoto.Event_PhotoTags, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        $(document).ready(function () {

            let duration = $(".gameList").find(':selected').data('duration');

            var eventDate = $(".eventDate")[0].defaultValue;
            var currentdate = new Date(eventDate);
            var formatedEventDate = currentdate.getFullYear() + "-"
                + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-"
                + ('0' + (currentdate.getDate())).slice(-2) + ""
            $(".eventDate")[0].defaultValue = formatedEventDate;

            var eventStartTime = $("#EventStartTime")[0].defaultValue;
            var currentTime = new Date(eventStartTime);
            var formatedStartTime = ('0' + currentTime.getHours()).slice(-2) + ":" + ('0' + currentTime.getMinutes()).slice(-2);
            $("#EventStartTime")[0].defaultValue = formatedStartTime;


            $("#EventEndTime")[0].defaultValue = getEventEndTime(duration);
        });

        $(".gameList").change(function () {
            let duration = $(this).find(':selected').data('duration')
            $("#EventEndTime")[0].defaultValue = getEventEndTime(duration);
        });

        $("#EventStartTime").change(function () {
            let duration = $("#Event_Game_ID").find(':selected').data('duration')
            console.log(duration);
            $("#EventEndTime").val(getEventEndTime(duration));
        });

        function getEventEndTime(duration) {
            var eventStartTime = $("#EventStartTime").val();
            const today = new Date();
            var currentTime = new Date(today.toDateString() + ' ' + eventStartTime);
            var eventEndTime = new Date(currentTime.setHours(currentTime.getHours() + duration));
            var formatedEndTime = ('0' + eventEndTime.getHours()).slice(-2) + ":" + ('0' + eventEndTime.getMinutes()).slice(-2);
            return formatedEndTime;
        }

        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#eventPhoto').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]); // convert to base64 string
            }
        }

        $("#Event_Photo").change(function () {
            readURL(this);
        });
    </script>
}
